project(qfusion)

cmake_minimum_required(VERSION 2.8.12)

set(CMAKE_MODULE_PATH ${CMAKE_HOME_DIRECTORY}/cmake)
include(QfusionUtils)

set(QFUSION_GAME_DIR base)

if (NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE "Debug")
endif()

if (CMAKE_BUILD_TYPE STREQUAL "Release")
	add_definitions(-DPUBLIC_BUILD)
endif()

if (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	execute_process(COMMAND ../ggbuild/lua.exe ../ggbuild/git_version.lua OUTPUT_FILE qcommon/gitversion.h)
endif()
if (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	execute_process(COMMAND ../ggbuild/lua.linux ../ggbuild/git_version.lua OUTPUT_FILE qcommon/gitversion.h)
endif()

add_definitions(-DCURL_STATICLIB)
add_definitions(-D_LIBCPP_TYPE_TRAITS)

# Find prebuilt libs
if (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	if (CMAKE_BUILD_TYPE STREQUAL "Release")
		set(LIBS_ARCH "windows-release")
	else()
		set(LIBS_ARCH "windows-debug")
	endif()
endif()

if (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	if (CMAKE_BUILD_TYPE STREQUAL "Release")
		set(LIBS_ARCH "linux-release")
	else()
		set(LIBS_ARCH "linux-debug")
	endif()
endif()

set(ANGELSCRIPT_LIBRARY "${CMAKE_SOURCE_DIR}/../libs/angelscript/${LIBS_ARCH}/${CMAKE_STATIC_LIBRARY_PREFIX}angelscript${CMAKE_STATIC_LIBRARY_SUFFIX}")

set(CURL_LIBRARY "${CMAKE_SOURCE_DIR}/../libs/curl/${LIBS_ARCH}/${CMAKE_STATIC_LIBRARY_PREFIX}curl${CMAKE_STATIC_LIBRARY_SUFFIX}")

set(MBEDTLS_LIBRARY "${CMAKE_SOURCE_DIR}/../libs/mbedtls/${LIBS_ARCH}/${CMAKE_STATIC_LIBRARY_PREFIX}mbedtls${CMAKE_STATIC_LIBRARY_SUFFIX}")

set(FREETYPE_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/../libs/freetype")
set(FREETYPE_LIBRARY "${CMAKE_SOURCE_DIR}/../libs/freetype/${LIBS_ARCH}/${CMAKE_STATIC_LIBRARY_PREFIX}freetype${CMAKE_STATIC_LIBRARY_SUFFIX}")

set(OPENAL_LIBRARY "${CMAKE_SOURCE_DIR}/../libs/openal/${LIBS_ARCH}/${CMAKE_STATIC_LIBRARY_PREFIX}openal${CMAKE_STATIC_LIBRARY_SUFFIX}")

set(SDL2_LIBRARY "${CMAKE_SOURCE_DIR}/../libs/sdl/${LIBS_ARCH}/${CMAKE_STATIC_LIBRARY_PREFIX}SDL2${CMAKE_STATIC_LIBRARY_SUFFIX}")
set(SDL2MAIN_LIBRARY "${CMAKE_SOURCE_DIR}/../libs/sdl/${LIBS_ARCH}/${CMAKE_STATIC_LIBRARY_PREFIX}SDL2main${CMAKE_STATIC_LIBRARY_SUFFIX}")

set(ZLIB_LIBRARY "${CMAKE_SOURCE_DIR}/../libs/zlib/${LIBS_ARCH}/${CMAKE_STATIC_LIBRARY_PREFIX}zlib${CMAKE_STATIC_LIBRARY_SUFFIX}")

set(ZSTD_LIBRARY "${CMAKE_SOURCE_DIR}/../libs/zstd/${LIBS_ARCH}/${CMAKE_STATIC_LIBRARY_PREFIX}zstd${CMAKE_STATIC_LIBRARY_SUFFIX}")

# Compiler settings
include_directories("${CMAKE_SOURCE_DIR}" "${CMAKE_SOURCE_DIR}/../libs")

if (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	add_definitions(-D_CRT_SECURE_NO_WARNINGS -DWIN32_LEAN_AND_MEAN -DNOMINMAX)

	set(CURL_LIBRARIES "${CURL_LIBRARY}")

	add_release_link_flags("/LTCG")

	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MP")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD /W4 /Ob1 /GL /Ot")
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd /W4")
	set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /MD /W4 /Ob1 /GL /Ot")
	set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /MDd /W4")
	set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /MD /W4")
	set(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} /MD /W4")
	set(CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO} /MD /W4")
	set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} /MD /W4")
endif()

if (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	add_definitions(-D_LARGEFILE64_SOURCE -D_LARGEFILE_SOURCE)

	set(CURL_LIBRARIES "${CURL_LIBRARY}" "${MBEDTLS_LIBRARY}")

	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pipe -Wall -fvisibility=hidden -fno-strict-aliasing")
	set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -O0 -D_DEBUG")
	set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -ffast-math -msse2 -O2")

	set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -std=c++11 -static-libstdc++")
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")

	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c11 -D_POSIX_C_SOURCE=200112L -D_XOPEN_SOURCE=500")
	# idk the exact version -no-pie got added but MSC is running 4.9.2
	if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 4.9.2)
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -no-pie")
	endif()

	# -Wl,--as-needed
	add_common_link_flags("-Wl,--as-needed")

	# -s in release link flags
	add_release_link_flags("-s")
endif()

# Linux-only specific settings
if (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	if (CMAKE_CROSSCOMPILING)
		set(CMAKE_LIBRARY_ARCHITECTURE "${CMAKE_SYSTEM_PROCESSOR}-linux-gnu")
		link_directories("${CMAKE_FIND_ROOT_PATH}/usr/lib/${CMAKE_SYSTEM_PROCESSOR}-linux-gnu")
	endif()

	# Remove compilating flags from link options
	# string(REPLACE "<FLAGS>" "" CMAKE_C_LINK_EXECUTABLE "${CMAKE_C_LINK_EXECUTABLE}")
	# string(REPLACE "<LANGUAGE_COMPILE_FLAGS>" "" CMAKE_C_CREATE_SHARED_LIBRARY "${CMAKE_C_CREATE_SHARED_LIBRARY}")
	# string(REPLACE "<LANGUAGE_COMPILE_FLAGS>" "" CMAKE_C_CREATE_SHARED_MODULE "${CMAKE_C_CREATE_SHARED_MODULE}")

	# Remove soname link flags from library linking options
	string(REPLACE "<SONAME_FLAG><TARGET_SONAME>" "" CMAKE_C_CREATE_SHARED_LIBRARY "${CMAKE_C_CREATE_SHARED_LIBRARY}")
	string(REPLACE "<SONAME_FLAG><TARGET_SONAME>" "" CMAKE_C_CREATE_SHARED_MODULE "${CMAKE_C_CREATE_SHARED_MODULE}")

	# Remove -rdynamic from link options
	string(REPLACE "-rdynamic" "" CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "${CMAKE_SHARED_LIBRARY_LINK_C_FLAGS}")
endif()

if (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	if (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
		STRING(TOLOWER "win32_x64.tar.gz" TAR_GZ_NAME)
	else()
		STRING(TOLOWER "${CMAKE_SYSTEM_NAME}_${CMAKE_SYSTEM_PROCESSOR}.tar.gz" TAR_GZ_NAME)
	endif()
	if (NOT QFUSION_TAR_GZ_OUTPUT_DIRECTORY)
		set(TAR_GZ_DIST "client_${TAR_GZ_NAME}")
	else()
		set(TAR_GZ_DIST "${QFUSION_TAR_GZ_OUTPUT_DIRECTORY}/client_${TAR_GZ_NAME}")
	endif()
	add_custom_target(tar_gz COMMAND ${CMAKE_COMMAND} -E tar "cfvz" ${TAR_GZ_DIST} "${CMAKE_HOME_DIRECTORY}/build/")
	add_dependencies(tar_gz client game server)
endif()

add_subdirectory(client)
add_subdirectory(game)
add_subdirectory(server)
